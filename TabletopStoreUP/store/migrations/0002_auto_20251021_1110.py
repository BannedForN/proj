# Generated by Django 5.2.6 on 2025-10-21 08:10

from django.db import migrations


class Migration(migrations.Migration):

    dependencies = [
        ('store', '0001_initial'),
    ]

    operations = [

        # === === === ФУНКЦИИ === === ===
        migrations.RunSQL(
            """
            CREATE OR REPLACE FUNCTION get_user_total_spent(user_id INT)
            RETURNS DECIMAL AS $$
            BEGIN
                RETURN (
                    SELECT COALESCE(SUM(total), 0)
                    FROM store_order
                    WHERE user_id = get_user_total_spent.user_id
                );
            END;
            $$ LANGUAGE plpgsql;
            """
        ),

        migrations.RunSQL(
            """
            CREATE OR REPLACE FUNCTION get_product_sales_count(product_id INT)
            RETURNS INT AS $$
            BEGIN
                RETURN (
                    SELECT COALESCE(SUM(quantity), 0)
                    FROM store_orderitem
                    WHERE product_id = get_product_sales_count.product_id
                );
            END;
            $$ LANGUAGE plpgsql;
            """
        ),

        migrations.RunSQL(
            """
            CREATE OR REPLACE FUNCTION get_orders_count_by_status(status_name TEXT)
            RETURNS INT AS $$
            BEGIN
                RETURN (
                    SELECT COUNT(*)
                    FROM store_order o
                    JOIN store_orderstatus s ON o.status_id = s.id
                    WHERE s.name = status_name
                );
            END;
            $$ LANGUAGE plpgsql;
            """
        ),


        # === === === ПРОЦЕДУРЫ === === ===
        migrations.RunSQL(
            """
            CREATE OR REPLACE PROCEDURE create_order(p_user_id INT, p_total DECIMAL, p_status_id INT)
            LANGUAGE plpgsql
            AS $$
            BEGIN
                INSERT INTO store_order (user_id, total, status_id, order_date)
                VALUES (p_user_id, p_total, p_status_id, NOW());
            END;
            $$;
            """
        ),

        migrations.RunSQL(
            """
            CREATE OR REPLACE PROCEDURE update_order_status(p_order_id INT, p_new_status_id INT)
            LANGUAGE plpgsql
            AS $$
            BEGIN
                UPDATE store_order
                SET status_id = p_new_status_id
                WHERE id = p_order_id;
            END;
            $$;
            """
        ),

        migrations.RunSQL(
            """
            CREATE OR REPLACE PROCEDURE delete_order(p_order_id INT)
            LANGUAGE plpgsql
            AS $$
            BEGIN
                DELETE FROM store_orderitem WHERE order_id = p_order_id;
                DELETE FROM store_payment WHERE order_id = p_order_id;
                DELETE FROM store_delivery WHERE order_id = p_order_id;
                DELETE FROM store_order WHERE id = p_order_id;
            END;
            $$;
            """
        ),


        # === === === ТРИГГЕРЫ === === ===

        # 1️⃣ Не позволять отрицательный остаток
        migrations.RunSQL(
            """
            CREATE OR REPLACE FUNCTION prevent_negative_stock()
            RETURNS TRIGGER AS $$
            BEGIN
                IF (SELECT stock FROM store_product WHERE id = NEW.product_id) < NEW.quantity THEN
                    RAISE EXCEPTION 'Недостаточно товара на складе для продукта %', NEW.product_id;
                END IF;
                UPDATE store_product
                SET stock = stock - NEW.quantity
                WHERE id = NEW.product_id;
                RETURN NEW;
            END;
            $$ LANGUAGE plpgsql;
            """
        ),

        migrations.RunSQL(
            """
            DROP TRIGGER IF EXISTS trg_prevent_negative_stock ON store_orderitem;
            CREATE TRIGGER trg_prevent_negative_stock
            BEFORE INSERT ON store_orderitem
            FOR EACH ROW
            EXECUTE FUNCTION prevent_negative_stock();
            """
        ),

        # 2️⃣ Автообновление суммы заказа
        migrations.RunSQL(
            """
            CREATE OR REPLACE FUNCTION auto_update_total_on_item_insert()
            RETURNS TRIGGER AS $$
            BEGIN
                UPDATE store_order
                SET total = (
                    SELECT COALESCE(SUM(price * quantity), 0)
                    FROM store_orderitem
                    WHERE order_id = NEW.order_id
                )
                WHERE id = NEW.order_id;
                RETURN NEW;
            END;
            $$ LANGUAGE plpgsql;
            """
        ),

        migrations.RunSQL(
            """
            DROP TRIGGER IF EXISTS trg_auto_update_total_on_item_insert ON store_orderitem;
            CREATE TRIGGER trg_auto_update_total_on_item_insert
            AFTER INSERT OR UPDATE OR DELETE ON store_orderitem
            FOR EACH ROW
            EXECUTE FUNCTION auto_update_total_on_item_insert();
            """
        ),

        # 3️⃣ Логирование смены статуса оплаты
        migrations.RunSQL(
            """
            CREATE TABLE IF NOT EXISTS store_paymentlog (
                id SERIAL PRIMARY KEY,
                payment_id INT,
                old_status_id INT,
                new_status_id INT,
                changed_at TIMESTAMP DEFAULT NOW()
            );
            """
        ),

        migrations.RunSQL(
            """
            CREATE OR REPLACE FUNCTION log_payment_status_change()
            RETURNS TRIGGER AS $$
            BEGIN
                IF OLD.status_id IS DISTINCT FROM NEW.status_id THEN
                    INSERT INTO store_paymentlog (payment_id, old_status_id, new_status_id)
                    VALUES (OLD.id, OLD.status_id, NEW.status_id);
                END IF;
                RETURN NEW;
            END;
            $$ LANGUAGE plpgsql;
            """
        ),

        migrations.RunSQL(
            """
            DROP TRIGGER IF EXISTS trg_log_payment_status_change ON store_payment;
            CREATE TRIGGER trg_log_payment_status_change
            AFTER UPDATE ON store_payment
            FOR EACH ROW
            EXECUTE FUNCTION log_payment_status_change();
            """
        ),
    ]

